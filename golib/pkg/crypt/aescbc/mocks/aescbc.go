// Code generated by MockGen. DO NOT EDIT.
// Source: ./aescbc.go

// Package mock_aescbc is a generated GoMock package.
package mock_aescbc

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCipherAesCbcInterface is a mock of CipherAesCbcInterface interface.
type MockCipherAesCbcInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCipherAesCbcInterfaceMockRecorder
}

// MockCipherAesCbcInterfaceMockRecorder is the mock recorder for MockCipherAesCbcInterface.
type MockCipherAesCbcInterfaceMockRecorder struct {
	mock *MockCipherAesCbcInterface
}

// NewMockCipherAesCbcInterface creates a new mock instance.
func NewMockCipherAesCbcInterface(ctrl *gomock.Controller) *MockCipherAesCbcInterface {
	mock := &MockCipherAesCbcInterface{ctrl: ctrl}
	mock.recorder = &MockCipherAesCbcInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCipherAesCbcInterface) EXPECT() *MockCipherAesCbcInterfaceMockRecorder {
	return m.recorder
}

// GetIvBase64FromSecuredText mocks base method.
func (m *MockCipherAesCbcInterface) GetIvBase64FromSecuredText(input []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIvBase64FromSecuredText", input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIvBase64FromSecuredText indicates an expected call of GetIvBase64FromSecuredText.
func (mr *MockCipherAesCbcInterfaceMockRecorder) GetIvBase64FromSecuredText(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIvBase64FromSecuredText", reflect.TypeOf((*MockCipherAesCbcInterface)(nil).GetIvBase64FromSecuredText), input)
}

// IsBase64 mocks base method.
func (m *MockCipherAesCbcInterface) IsBase64(text string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBase64", text)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBase64 indicates an expected call of IsBase64.
func (mr *MockCipherAesCbcInterfaceMockRecorder) IsBase64(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBase64", reflect.TypeOf((*MockCipherAesCbcInterface)(nil).IsBase64), text)
}

// SecuredDecryptBase64 mocks base method.
func (m *MockCipherAesCbcInterface) SecuredDecryptBase64(data string, isSafeMode bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecuredDecryptBase64", data, isSafeMode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecuredDecryptBase64 indicates an expected call of SecuredDecryptBase64.
func (mr *MockCipherAesCbcInterfaceMockRecorder) SecuredDecryptBase64(data, isSafeMode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecuredDecryptBase64", reflect.TypeOf((*MockCipherAesCbcInterface)(nil).SecuredDecryptBase64), data, isSafeMode)
}

// SecuredDecryptHex mocks base method.
func (m *MockCipherAesCbcInterface) SecuredDecryptHex(data string, isSafeMode bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecuredDecryptHex", data, isSafeMode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecuredDecryptHex indicates an expected call of SecuredDecryptHex.
func (mr *MockCipherAesCbcInterfaceMockRecorder) SecuredDecryptHex(data, isSafeMode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecuredDecryptHex", reflect.TypeOf((*MockCipherAesCbcInterface)(nil).SecuredDecryptHex), data, isSafeMode)
}

// SecuredEncryptBase64 mocks base method.
func (m *MockCipherAesCbcInterface) SecuredEncryptBase64(data string, isSafeMode bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecuredEncryptBase64", data, isSafeMode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecuredEncryptBase64 indicates an expected call of SecuredEncryptBase64.
func (mr *MockCipherAesCbcInterfaceMockRecorder) SecuredEncryptBase64(data, isSafeMode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecuredEncryptBase64", reflect.TypeOf((*MockCipherAesCbcInterface)(nil).SecuredEncryptBase64), data, isSafeMode)
}

// SecuredEncryptHex mocks base method.
func (m *MockCipherAesCbcInterface) SecuredEncryptHex(data string, isSafeMode bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecuredEncryptHex", data, isSafeMode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecuredEncryptHex indicates an expected call of SecuredEncryptHex.
func (mr *MockCipherAesCbcInterfaceMockRecorder) SecuredEncryptHex(data, isSafeMode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecuredEncryptHex", reflect.TypeOf((*MockCipherAesCbcInterface)(nil).SecuredEncryptHex), data, isSafeMode)
}

// SetIv mocks base method.
func (m *MockCipherAesCbcInterface) SetIv(iv string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIv", iv)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIv indicates an expected call of SetIv.
func (mr *MockCipherAesCbcInterfaceMockRecorder) SetIv(iv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIv", reflect.TypeOf((*MockCipherAesCbcInterface)(nil).SetIv), iv)
}
