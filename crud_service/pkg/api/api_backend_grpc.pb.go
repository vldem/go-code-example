// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api_backend.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BackendClient is the client API for Backend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendClient interface {
	UserCreate(ctx context.Context, in *BackendUserCreateRequest, opts ...grpc.CallOption) (*BackendUserCreateResponse, error)
	UserGet(ctx context.Context, in *BackendUserGetRequest, opts ...grpc.CallOption) (*BackendUserGetResponse, error)
	UserList(ctx context.Context, in *BackendUserListRequest, opts ...grpc.CallOption) (*BackendUserListResponse, error)
	UserUpdate(ctx context.Context, in *BackendUserUpdateRequest, opts ...grpc.CallOption) (*BackendUserUpdateResponse, error)
	UserDelete(ctx context.Context, in *BackendUserDeleteRequest, opts ...grpc.CallOption) (*BackendUserDeleteResponse, error)
	UsersAdd(ctx context.Context, opts ...grpc.CallOption) (Backend_UsersAddClient, error)
}

type backendClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendClient(cc grpc.ClientConnInterface) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) UserCreate(ctx context.Context, in *BackendUserCreateRequest, opts ...grpc.CallOption) (*BackendUserCreateResponse, error) {
	out := new(BackendUserCreateResponse)
	err := c.cc.Invoke(ctx, "/ozon.dev.vldem.hw2.api.Backend/UserCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) UserGet(ctx context.Context, in *BackendUserGetRequest, opts ...grpc.CallOption) (*BackendUserGetResponse, error) {
	out := new(BackendUserGetResponse)
	err := c.cc.Invoke(ctx, "/ozon.dev.vldem.hw2.api.Backend/UserGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) UserList(ctx context.Context, in *BackendUserListRequest, opts ...grpc.CallOption) (*BackendUserListResponse, error) {
	out := new(BackendUserListResponse)
	err := c.cc.Invoke(ctx, "/ozon.dev.vldem.hw2.api.Backend/UserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) UserUpdate(ctx context.Context, in *BackendUserUpdateRequest, opts ...grpc.CallOption) (*BackendUserUpdateResponse, error) {
	out := new(BackendUserUpdateResponse)
	err := c.cc.Invoke(ctx, "/ozon.dev.vldem.hw2.api.Backend/UserUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) UserDelete(ctx context.Context, in *BackendUserDeleteRequest, opts ...grpc.CallOption) (*BackendUserDeleteResponse, error) {
	out := new(BackendUserDeleteResponse)
	err := c.cc.Invoke(ctx, "/ozon.dev.vldem.hw2.api.Backend/UserDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) UsersAdd(ctx context.Context, opts ...grpc.CallOption) (Backend_UsersAddClient, error) {
	stream, err := c.cc.NewStream(ctx, &Backend_ServiceDesc.Streams[0], "/ozon.dev.vldem.hw2.api.Backend/UsersAdd", opts...)
	if err != nil {
		return nil, err
	}
	x := &backendUsersAddClient{stream}
	return x, nil
}

type Backend_UsersAddClient interface {
	Send(*BackendUsersAddRequest) error
	Recv() (*BackendUsersAddResponse, error)
	grpc.ClientStream
}

type backendUsersAddClient struct {
	grpc.ClientStream
}

func (x *backendUsersAddClient) Send(m *BackendUsersAddRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *backendUsersAddClient) Recv() (*BackendUsersAddResponse, error) {
	m := new(BackendUsersAddResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BackendServer is the server API for Backend service.
// All implementations must embed UnimplementedBackendServer
// for forward compatibility
type BackendServer interface {
	UserCreate(context.Context, *BackendUserCreateRequest) (*BackendUserCreateResponse, error)
	UserGet(context.Context, *BackendUserGetRequest) (*BackendUserGetResponse, error)
	UserList(context.Context, *BackendUserListRequest) (*BackendUserListResponse, error)
	UserUpdate(context.Context, *BackendUserUpdateRequest) (*BackendUserUpdateResponse, error)
	UserDelete(context.Context, *BackendUserDeleteRequest) (*BackendUserDeleteResponse, error)
	UsersAdd(Backend_UsersAddServer) error
	mustEmbedUnimplementedBackendServer()
}

// UnimplementedBackendServer must be embedded to have forward compatible implementations.
type UnimplementedBackendServer struct {
}

func (UnimplementedBackendServer) UserCreate(context.Context, *BackendUserCreateRequest) (*BackendUserCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreate not implemented")
}
func (UnimplementedBackendServer) UserGet(context.Context, *BackendUserGetRequest) (*BackendUserGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGet not implemented")
}
func (UnimplementedBackendServer) UserList(context.Context, *BackendUserListRequest) (*BackendUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserList not implemented")
}
func (UnimplementedBackendServer) UserUpdate(context.Context, *BackendUserUpdateRequest) (*BackendUserUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdate not implemented")
}
func (UnimplementedBackendServer) UserDelete(context.Context, *BackendUserDeleteRequest) (*BackendUserDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDelete not implemented")
}
func (UnimplementedBackendServer) UsersAdd(Backend_UsersAddServer) error {
	return status.Errorf(codes.Unimplemented, "method UsersAdd not implemented")
}
func (UnimplementedBackendServer) mustEmbedUnimplementedBackendServer() {}

// UnsafeBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServer will
// result in compilation errors.
type UnsafeBackendServer interface {
	mustEmbedUnimplementedBackendServer()
}

func RegisterBackendServer(s grpc.ServiceRegistrar, srv BackendServer) {
	s.RegisterService(&Backend_ServiceDesc, srv)
}

func _Backend_UserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackendUserCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).UserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozon.dev.vldem.hw2.api.Backend/UserCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).UserCreate(ctx, req.(*BackendUserCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_UserGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackendUserGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).UserGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozon.dev.vldem.hw2.api.Backend/UserGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).UserGet(ctx, req.(*BackendUserGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_UserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackendUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).UserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozon.dev.vldem.hw2.api.Backend/UserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).UserList(ctx, req.(*BackendUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_UserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackendUserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).UserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozon.dev.vldem.hw2.api.Backend/UserUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).UserUpdate(ctx, req.(*BackendUserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_UserDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackendUserDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).UserDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozon.dev.vldem.hw2.api.Backend/UserDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).UserDelete(ctx, req.(*BackendUserDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_UsersAdd_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BackendServer).UsersAdd(&backendUsersAddServer{stream})
}

type Backend_UsersAddServer interface {
	Send(*BackendUsersAddResponse) error
	Recv() (*BackendUsersAddRequest, error)
	grpc.ServerStream
}

type backendUsersAddServer struct {
	grpc.ServerStream
}

func (x *backendUsersAddServer) Send(m *BackendUsersAddResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *backendUsersAddServer) Recv() (*BackendUsersAddRequest, error) {
	m := new(BackendUsersAddRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Backend_ServiceDesc is the grpc.ServiceDesc for Backend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ozon.dev.vldem.hw2.api.Backend",
	HandlerType: (*BackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserCreate",
			Handler:    _Backend_UserCreate_Handler,
		},
		{
			MethodName: "UserGet",
			Handler:    _Backend_UserGet_Handler,
		},
		{
			MethodName: "UserList",
			Handler:    _Backend_UserList_Handler,
		},
		{
			MethodName: "UserUpdate",
			Handler:    _Backend_UserUpdate_Handler,
		},
		{
			MethodName: "UserDelete",
			Handler:    _Backend_UserDelete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UsersAdd",
			Handler:       _Backend_UsersAdd_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api_backend.proto",
}
